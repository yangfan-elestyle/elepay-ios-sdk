// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StripeFinancialConnections
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AuthenticationServices
import CoreMedia
import Foundation
import SafariServices
@_exported @_spi(STP) import StripeCore
@_exported import StripeFinancialConnections
@_spi(STP) import StripeUICore
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension StripeCore.StripeAPI {
  public struct BankAccountToken {
    public struct BankAccount {
      public let id: Swift.String
      public let accountHolderName: Swift.String?
      public let bankName: Swift.String?
      public let country: Swift.String
      public let currency: Swift.String
      public let fingerprint: Swift.String?
      public let last4: Swift.String
      public let routingNumber: Swift.String?
      public let status: Swift.String
    }
    public let id: Swift.String
    public let bankAccount: StripeCore.StripeAPI.BankAccountToken.BankAccount?
    public let clientIp: Swift.String?
    public let livemode: Swift.Bool
    public let used: Swift.Bool
  }
}
@_spi(STP) extension StripeCore.StripeAPI.BankAccountToken : Swift.Codable, Swift.Equatable {
  @_spi(STP) public static func == (a: StripeCore.StripeAPI.BankAccountToken, b: StripeCore.StripeAPI.BankAccountToken) -> Swift.Bool
  @_spi(STP) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(STP) public init(from decoder: any Swift.Decoder) throws
}
@_spi(STP) extension StripeCore.StripeAPI.BankAccountToken.BankAccount : Swift.Codable, Swift.Equatable {
  @_spi(STP) public static func == (a: StripeCore.StripeAPI.BankAccountToken.BankAccount, b: StripeCore.StripeAPI.BankAccountToken.BankAccount) -> Swift.Bool
  @_spi(STP) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(STP) public init(from decoder: any Swift.Decoder) throws
}
extension StripeCore.StripeAPI {
  public struct FinancialConnectionsAccount {
    public struct BalanceRefresh {
      @frozen public enum Status : Swift.String, StripeCore.SafeEnumCodable, Swift.Equatable {
        case failed
        case pending
        case succeeded
        case unparsable
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public let lastAttemptedAt: Swift.Int
      public let status: StripeCore.StripeAPI.FinancialConnectionsAccount.BalanceRefresh.Status
    }
    public struct CashBalance {
      public let available: [Swift.String : Swift.Int]?
    }
    public struct CreditBalance {
      public let used: [Swift.String : Swift.Int]?
    }
    public struct Balance {
      @frozen public enum ModelType : Swift.String, StripeCore.SafeEnumCodable, Swift.Equatable {
        case cash
        case credit
        case unparsable
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public let asOf: Swift.Int
      public let cash: StripeCore.StripeAPI.FinancialConnectionsAccount.CashBalance?
      public let credit: StripeCore.StripeAPI.FinancialConnectionsAccount.CreditBalance?
      public let current: [Swift.String : Swift.Int]
      public let type: StripeCore.StripeAPI.FinancialConnectionsAccount.Balance.ModelType
    }
    public struct OwnershipRefresh : Swift.Codable, Swift.Equatable {
      @frozen public enum Status : Swift.String, StripeCore.SafeEnumCodable, Swift.Equatable {
        case failed
        case pending
        case succeeded
        case unparsable
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public let lastAttemptedAt: Swift.Int
      public let status: StripeCore.StripeAPI.FinancialConnectionsAccount.OwnershipRefresh.Status
      public static func == (a: StripeCore.StripeAPI.FinancialConnectionsAccount.OwnershipRefresh, b: StripeCore.StripeAPI.FinancialConnectionsAccount.OwnershipRefresh) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum Category : Swift.String, StripeCore.SafeEnumCodable, Swift.Equatable {
      case cash
      case credit
      case investment
      case other
      case unparsable
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum Permissions : Swift.String, StripeCore.SafeEnumCodable, Swift.Equatable {
      case balances
      case ownership
      case paymentMethod
      case transactions
      case accountNumbers
      case unparsable
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum Status : Swift.String, StripeCore.SafeEnumCodable, Swift.Equatable {
      case active
      case disconnected
      case inactive
      case unparsable
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum Subcategory : Swift.String, StripeCore.SafeEnumCodable, Swift.Equatable {
      case checking
      case creditCard
      case lineOfCredit
      case mortgage
      case other
      case savings
      case unparsable
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum SupportedPaymentMethodTypes : Swift.String, StripeCore.SafeEnumCodable, Swift.Equatable {
      case link
      case usBankAccount
      case unparsable
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let balance: StripeCore.StripeAPI.FinancialConnectionsAccount.Balance?
    public let balanceRefresh: StripeCore.StripeAPI.FinancialConnectionsAccount.BalanceRefresh?
    public let ownership: Swift.String?
    public let ownershipRefresh: StripeCore.StripeAPI.FinancialConnectionsAccount.OwnershipRefresh?
    public let displayName: Swift.String?
    public let institutionName: Swift.String
    public let last4: Swift.String?
    public let category: StripeCore.StripeAPI.FinancialConnectionsAccount.Category
    public let created: Swift.Int
    public let id: Swift.String
    public let livemode: Swift.Bool
    public let permissions: [StripeCore.StripeAPI.FinancialConnectionsAccount.Permissions]?
    public let status: StripeCore.StripeAPI.FinancialConnectionsAccount.Status
    public let subcategory: StripeCore.StripeAPI.FinancialConnectionsAccount.Subcategory
    public let supportedPaymentMethodTypes: [StripeCore.StripeAPI.FinancialConnectionsAccount.SupportedPaymentMethodTypes]
  }
}
@_spi(STP) extension StripeCore.StripeAPI.FinancialConnectionsAccount : Swift.Codable, Swift.Equatable {
  @_spi(STP) public static func == (a: StripeCore.StripeAPI.FinancialConnectionsAccount, b: StripeCore.StripeAPI.FinancialConnectionsAccount) -> Swift.Bool
  @_spi(STP) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(STP) public init(from decoder: any Swift.Decoder) throws
}
@_spi(STP) extension StripeCore.StripeAPI.FinancialConnectionsAccount.BalanceRefresh : Swift.Codable, Swift.Equatable {
  @_spi(STP) public static func == (a: StripeCore.StripeAPI.FinancialConnectionsAccount.BalanceRefresh, b: StripeCore.StripeAPI.FinancialConnectionsAccount.BalanceRefresh) -> Swift.Bool
  @_spi(STP) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(STP) public init(from decoder: any Swift.Decoder) throws
}
@_spi(STP) extension StripeCore.StripeAPI.FinancialConnectionsAccount.CashBalance : Swift.Codable, Swift.Equatable {
  @_spi(STP) public static func == (a: StripeCore.StripeAPI.FinancialConnectionsAccount.CashBalance, b: StripeCore.StripeAPI.FinancialConnectionsAccount.CashBalance) -> Swift.Bool
  @_spi(STP) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(STP) public init(from decoder: any Swift.Decoder) throws
}
@_spi(STP) extension StripeCore.StripeAPI.FinancialConnectionsAccount.CreditBalance : Swift.Codable, Swift.Equatable {
  @_spi(STP) public static func == (a: StripeCore.StripeAPI.FinancialConnectionsAccount.CreditBalance, b: StripeCore.StripeAPI.FinancialConnectionsAccount.CreditBalance) -> Swift.Bool
  @_spi(STP) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(STP) public init(from decoder: any Swift.Decoder) throws
}
@_spi(STP) extension StripeCore.StripeAPI.FinancialConnectionsAccount.Balance : Swift.Codable, Swift.Equatable {
  @_spi(STP) public static func == (a: StripeCore.StripeAPI.FinancialConnectionsAccount.Balance, b: StripeCore.StripeAPI.FinancialConnectionsAccount.Balance) -> Swift.Bool
  @_spi(STP) public func encode(to encoder: any Swift.Encoder) throws
  @_spi(STP) public init(from decoder: any Swift.Decoder) throws
}
extension StripeCore.StripeAPI {
  public struct FinancialConnectionsSession {
    public struct AccountList {
      public let data: [StripeCore.StripeAPI.FinancialConnectionsAccount]
      public let hasMore: Swift.Bool
    }
    @_spi(STP) public enum PaymentAccount : Swift.Decodable {
      @_spi(STP) public struct BankAccount : Swift.Decodable {
        @_spi(STP) public let bankName: Swift.String?
        @_spi(STP) public let id: Swift.String
        @_spi(STP) public let last4: Swift.String
        @_spi(STP) public let routingNumber: Swift.String?
        @_spi(STP) public var instantlyVerified: Swift.Bool
        @_spi(STP) public init(from decoder: any Swift.Decoder) throws
      }
      @_spi(STP) case linkedAccount(StripeCore.StripeAPI.FinancialConnectionsAccount)
      @_spi(STP) case bankAccount(StripeCore.StripeAPI.FinancialConnectionsSession.PaymentAccount.BankAccount)
      @_spi(STP) case unparsable
      @_spi(STP) public init(from decoder: any Swift.Decoder) throws
    }
    public let clientSecret: Swift.String
    public let id: Swift.String
    public let accounts: StripeCore.StripeAPI.FinancialConnectionsSession.AccountList
    public let livemode: Swift.Bool
    @_spi(STP) public let paymentAccount: StripeCore.StripeAPI.FinancialConnectionsSession.PaymentAccount?
    @_spi(STP) public let bankAccountToken: StripeCore.StripeAPI.BankAccountToken?
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_spi(STP) extension StripeCore.StripeAPI.FinancialConnectionsSession : Swift.Decodable {
}
@_spi(STP) extension StripeCore.StripeAPI.FinancialConnectionsSession.AccountList : Swift.Decodable {
  @_spi(STP) public init(from decoder: any Swift.Decoder) throws
}
public struct FinancialConnectionsCustomManualEntryRequiredError : Swift.Error {
}
@_spi(STP) public enum HostControllerResult {
  @_spi(STP) case completed(StripeFinancialConnections.HostControllerResult.Completed)
  @_spi(STP) case failed(error: any Swift.Error)
  @_spi(STP) case canceled
  @_spi(STP) public enum Completed {
    @_spi(STP) case financialConnections(StripeCore.StripeAPI.FinancialConnectionsSession)
    @_spi(STP) case instantDebits(StripeCore.InstantDebitsLinkedBank)
  }
}
@_spi(STP) public class FinancialConnectionsSDKImplementation : StripeCore.FinancialConnectionsSDKInterface {
  @_spi(STP) required public init()
  @_spi(STP) public func presentFinancialConnectionsSheet(apiClient: StripeCore.STPAPIClient, clientSecret: Swift.String, returnURL: Swift.String?, elementsSessionContext: StripeCore.ElementsSessionContext?, onEvent: ((StripeCore.FinancialConnectionsEvent) -> Swift.Void)?, from presentingViewController: UIKit.UIViewController, completion: @escaping (StripeCore.FinancialConnectionsSDKResult) -> Swift.Void)
  @_spi(STP) @objc deinit
}
@_hasMissingDesignatedInitializers final public class FinancialConnectionsSheet {
  @frozen public enum Result {
    case completed(session: StripeCore.StripeAPI.FinancialConnectionsSession)
    case failed(error: any Swift.Error)
    case canceled
  }
  @frozen public enum TokenResult {
    case completed(result: (session: StripeCore.StripeAPI.FinancialConnectionsSession, token: StripeCore.StripeAPI.BankAccountToken?))
    case failed(error: any Swift.Error)
    case canceled
  }
  final public let financialConnectionsSessionClientSecret: Swift.String
  final public let returnURL: Swift.String?
  final public var onEvent: ((StripeCore.FinancialConnectionsEvent) -> Swift.Void)?
  final public var apiClient: StripeCore.STPAPIClient {
    get
    set
  }
  @_spi(STP) final public var elementsSessionContext: StripeCore.ElementsSessionContext?
  @_spi(STP) final public let analyticsClient: any StripeCore.STPAnalyticsClientProtocol
  convenience public init(financialConnectionsSessionClientSecret: Swift.String, returnURL: Swift.String? = nil)
  final public func presentForToken(from presentingViewController: UIKit.UIViewController, completion: @escaping (StripeFinancialConnections.FinancialConnectionsSheet.TokenResult) -> Swift.Void)
  final public func present(from presentingViewController: UIKit.UIViewController, completion: @escaping (StripeFinancialConnections.FinancialConnectionsSheet.Result) -> Swift.Void)
  @_spi(STP) final public func present(from presentingViewController: UIKit.UIViewController, completion: @escaping (StripeFinancialConnections.HostControllerResult) -> Swift.Void)
  @objc deinit
}
@_spi(STP) extension StripeFinancialConnections.FinancialConnectionsSheet : StripeCore.STPAnalyticsProtocol {
  @_spi(STP) public static var stp_analyticsIdentifier: Swift.String
}
public enum FinancialConnectionsSheetError : Swift.Error, Foundation.LocalizedError {
  case unknown(debugDescription: Swift.String)
  public var localizedDescription: Swift.String {
    get
  }
}
@_spi(STP) extension StripeFinancialConnections.FinancialConnectionsSheetError : StripeCore.AnalyticLoggableErrorV2 {
  @_spi(STP) public var errorCode: Swift.Int {
    @_spi(STP) get
  }
  @_spi(STP) public func analyticLoggableSerializeForLogging() -> [Swift.String : Any]
}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.BalanceRefresh.Status : Swift.Hashable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.BalanceRefresh.Status : Swift.RawRepresentable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.BalanceRefresh.Status : Swift.Sendable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Balance.ModelType : Swift.Hashable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Balance.ModelType : Swift.RawRepresentable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Balance.ModelType : Swift.Sendable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.OwnershipRefresh.Status : Swift.Hashable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.OwnershipRefresh.Status : Swift.RawRepresentable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.OwnershipRefresh.Status : Swift.Sendable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Category : Swift.Hashable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Category : Swift.RawRepresentable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Category : Swift.Sendable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Permissions : Swift.Hashable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Permissions : Swift.RawRepresentable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Permissions : Swift.Sendable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Status : Swift.Hashable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Status : Swift.RawRepresentable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Status : Swift.Sendable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Subcategory : Swift.Hashable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Subcategory : Swift.RawRepresentable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.Subcategory : Swift.Sendable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.SupportedPaymentMethodTypes : Swift.Hashable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.SupportedPaymentMethodTypes : Swift.RawRepresentable {}
extension StripeCore.StripeAPI.FinancialConnectionsAccount.SupportedPaymentMethodTypes : Swift.Sendable {}
